{
	"name": "TransformMovieData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CopiedMovies_scbutler1",
						"type": "DatasetReference"
					},
					"name": "MoviesADLS"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLDB",
						"type": "DatasetReference"
					},
					"name": "SQLDB"
				}
			],
			"transformations": [
				{
					"name": "SelectAndRename"
				},
				{
					"name": "Post1950Movies"
				},
				{
					"name": "SelectPrimaryGenre"
				},
				{
					"name": "RankMoviesByRatings"
				},
				{
					"name": "AggregateRatings"
				},
				{
					"name": "UpsertIfTrue"
				}
			],
			"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> MoviesADLS\nMoviesADLS select(mapColumn(\n\t\tMovie = movie,\n\t\tTitle = title,\n\t\tGenres = genres,\n\t\tYear = year,\n\t\tRating,\n\t\t{Rotten Tomato} = {Rotton Tomato}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectAndRename\nSelectAndRename filter(toInteger(Year) > 1950) ~> Post1950Movies\nPost1950Movies derive(PrimaryGenres = iif(locate('|',Genres) > 1, left(Genres,locate('|',Genres) -1),Genres)) ~> SelectPrimaryGenre\nSelectPrimaryGenre window(over(genres = PrimaryGenres,\n\t\tYear),\n\tdesc({Rotten Tomato}, true),\n\tRatingsRank = rank()) ~> RankMoviesByRatings\nRankMoviesByRatings aggregate(groupBy(PrimaryGenres,\n\t\tYear),\n\tAverageRating = avg(toInteger({Rotten Tomato}))\r\n,\n\t\tHighestRated = first(Title),\n\t\tLowestRated = last(Title)\r\n,\n\t\tNumberOfMovies = count()) ~> AggregateRatings\nAggregateRatings alterRow(updateIf(true())) ~> UpsertIfTrue\nUpsertIfTrue sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PrimaryGenres','Year'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SQLDB"
		}
	}
}